import ui, keyboard, clipboard, time, re, notification, tweepy, os
from time import sleep
from datetime import date
import datetime, sound, sys
from requests_oauthlib import OAuth1Session
import json, urllib, time
from objc_util import *
import csv, console, threading
import requests

alpha_mode = 'False'
img_mode = 'False'
switch = 0
new = ['', '', '', '']
tw_api = []
error_script=""
token = ""
slug=""
my_screen_name=""
list_switch=False

dirr = re.split('/', __file__)
send_code=0
send_code *= 1


url =clipboard.get()
if url.find('https://')==-1:
	console.hud_alert("TwitterURL„Çí„Ç≥„Éî„Éº„Åó„Å¶„Åã„ÇâÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ",'error')
	sys.exit(3)


def convert_from_hash(hash_text):
	return original_text
#ÂéüÊñá‚ÜíÊöóÂè∑
def convert_to_hash(text):
	return hash_text

sub_idt = ['„ÅÑ„Å°', '„Å´„Éº|„Å´', '„Åï„Çì', '„Çà„Çì', '„Åî„Éº|„Åî', '„Çç„Åè', '„Å™„Å™', '„ÅØ„Å°', '„Åç„ÇÖ„ÅÜ', '„Çå„ÅÑ', '„Åú„Çç', '„Ç§„ÉÅ', '‰∫å„Éº|‰∫å', '„Çµ„É≥', '„É®„É≥', '„Ç¥|„Ç¥„Éº', '„É≠„ÇØ', '„Éä„Éä', '„Éè„ÉÅ', '„Ç≠„É•„Ç¶', '„Çº„É≠']

sub_numidt = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']

idt = ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'Â£±', 'Âºê', 'ÂèÇ', '‰ºç', 'Èô∏', '‚ë†', '‚ë°', '‚ë¢', '‚ë£', '‚ë§', '‚ë•', '‚ë¶', '‚ëß', '‚ë®', '‚ì™', '‚ù∂', '‚ù∑', '‚ù∏', '‚ùπ', '‚ù∫', '‚ùª', '‚ùº', '‚ùΩ', '‚ùæ', '‚ë¥', '‚ëµ', '‚ë∂', '‚ë∑', '‚ë∏', '‚ëπ', '‚ë∫', '‚ëª', '‚ëº', '\uf8b7', '\uf8b8', '\uf8b9', '\uf8ba', '\uf8bb', '\uf8bc', '\uf8bd', '\uf8be', '\uf8bf', '\uf8c0', '1‚É£', '2‚É£', '3‚É£', '4‚É£', '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', '0‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', '0Ô∏è‚É£', 'Èõ∂', '‚ûÄ', '‚ûÅ', '‚ûÇ', '‚ûÉ', '‚ûÑ', '‚ûÖ', '‚ûÜ', '‚ûá', '‚ûà', ' ‚ìµ', '‚ì∂', '‚ì∑', '‚ì∏', '‚ìπ', '‚ì∫', '‚ìª', '‚ìº', '‚ìΩ', 'ùüè', 'ùüê', 'ùüë', 'ùüí', 'ùüì', 'ùüî', 'ùüï', 'ùüñ', 'ùüó', '0', 'ùü¨', 'ùü≠', 'ùüÆ', 'ùüØ', 'ùü∞', 'ùü±', 'ùü≤', 'ùü≥', 'ùü¥', 'ùüµ', 'ùü¢', 'ùü£', 'ùü§', 'ùü•', 'ùü¶', 'ùüß', 'ùü®', 'ùü©', 'ùü™', 'ùü´', 'ùü∂', 'ùü∑', 'ùü∏', 'ùüπ', 'ùü∫', 'ùüª', 'ùüº', 'ùüΩ', 'ùüæ', 'ùüø', 'ùüò', 'ùüô', 'ùüö', 'ùüõ', 'ùüú', 'ùüù', 'ùüû', 'ùüü', 'ùü†', 'ùü°']

numidt = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '5', '6', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
passch = [
 'pass', 'Pass', 'PASS', '„Éë„Çπ', '„Å±„Åô', 'ÔæäÔæüÔΩΩ', 'üîë', 'üóù', 'üîì', 'üîê', 'üîí', '„Å±', '„Éë', 'ÔæäÔæü', 'ps', 'Ps' , 'PS', 'pw', 'PW', 'Pw', 'Èçµ', 'ùó£', 'ùêè', 'ùëÉ', 'ùñØ', 'ùó£', 'ùòó', 'ùôã', 'ùôø']
roomidt = [
 'üè†', 'üè°', 'üèò', 'üö™', 'room', 'Áï™Âè∑', '„É´', '„É†', '„Çã']
vectoridt = ['‚Üí', '‚ñ∂Ô∏é', '‚ñ∂', '‚á®', '‚û°Ô∏è', 'üëâ', '‚ñ∑', '‚è©', '‚áí', '‚òû', 'üîú', '‚åá', 'ÔΩú', 'Ôø§', '‚îÜ']

show_url = 'https://api.twitter.com/1.1/statuses/show.json'
labs_url = 'https://api.twitter.com/labs/2/tweets'
lim_url = 'https://api.twitter.com/1.1/application/rate_limit_status.json?resources=statuses'

def converter(num):
    big_ch = [
     'Ôºê', 'Ôºë', 'Ôºí', 'Ôºì', 'Ôºî', 'Ôºï', 'Ôºñ', 'Ôºó', 'Ôºò', 'Ôºô']
    small_ch = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    numpass = ''
    for i in range(len(num)):
        match_flag = 0
        for j in range(10):
            if num[i] == big_ch[j]:
                match_flag = 1
                numpass = numpass + small_ch[j]

        if match_flag == 0:
            numpass = numpass + num[i]

    return numpass


def url2id(url):
    userids = re.split('/|\\?', url)
    if len(userids) > 3:
        userid = userids[3]
    else:
        print('Ë™≠„ÅøËæº„ÇÅ„Å™„ÅÑURL„Åß„Åô„ÄÇ')
        sys.exit(3)
    return userid

def add_img(iurl, itext):
    image_data = urllib.request.urlopen(iurl).read()
    language_preference = ['en']
    load_framework('Vision')
    VNRecognizeTextRequest = ObjCClass('VNRecognizeTextRequest')
    VNImageRequestHandler = ObjCClass('VNImageRequestHandler')
    req = VNRecognizeTextRequest.alloc().init().autorelease()
    req.setRecognitionLanguages_(language_preference)
    handler = VNImageRequestHandler.alloc().initWithData_options_(image_data, None).autorelease()
    image_data = ''
    handler.performRequests_error_([req], None)
    for result in req.results():
        img_num = re.sub('\\D', '', str(result.text()))
        itext += '\n' + img_num
    return itext

def tweets2element(atweets):
    global error_script
    for atweet in atweets:
        atweet_id = atweet.id
        atweet_text = atweet.text
        atweet_name = atweet.author.name
        try:
            aimg_url = atweet.extended_entities['media'][0]['media_url']
        except:
            aimg_url = ''

    try:
        return (
         atweet_id, atweet_text, atweet_name, aimg_url)
    except Exception as e:
        error_script += str(e)
        return ('', 'err', '', '')

def list_tweets2element(ltweets):
    global error_script
    for ltweet in ltweets:
        ltweet_id = ltweet.id
        ltweet_text = "listtt"+ltweet.text
        ltweet_name = ltweet.author.name
        try:
            limg_url = ltweet.extended_entities['media'][0]['media_url']
        except:
            limg_url = ''

    try:
        return (
         ltweet_id, ltweet_text, ltweet_name, limg_url)
    except Exception as e:
        error_script += str(e)
        return ('', 'err', '', '')

def tweet_get(twpy_api, userid, first=False):
    global switch
    try:
        gtweets = twpy_api.user_timeline(count=1, screen_name=userid)
        return tweets2element(gtweets)
    except Exception as e:
        if switch == 0:
            en = re.sub('[^0-9]','', str(e.args))
            if en == '88':
                console.hud_alert('„ÄêÂèñÂæóÂà∂Èôê„Ç®„É©„Éº„Äë','error')
                if first:
                    console.show_image('./src/limit_error.png')
        	
        switch = 2
        sys.exit(3)
        return False

def init_list_member(api,target_screen):
    global slug, my_screen_name
    global list_switch
    global old_list_tweet
    try:
        lists = api.lists_all(api.me().screen_name)
        for i in range(len(lists)):
            if lists[i].name == "guerrilla_list":
                slug = lists[i].slug
                my_screen_name = lists[i].user.screen_name
        if slug =="":
            list_switch = False
        else:
            list_members = api.list_members(owner_screen_name = my_screen_name, slug = slug)
            for member in list_members:
            	api.remove_list_member(owner_screen_name = my_screen_name, slug = slug, screen_name = member.screen_name)
            api.update_list(owner_screen_name = my_screen_name, slug = slug, mode="private")
            api.add_list_member(owner_screen_name = my_screen_name, slug = slug, screen_name = target_screen)
            api.update_list(owner_screen_name = my_screen_name, slug = slug, mode="public")
            old_list_tweet = list_tweet_get(api)[1]
            if len(api.list_members(owner_screen_name = my_screen_name, slug = slug)) > 0:
                list_switch = True
                print("***„Éó„É©„Çπ„É¢„Éº„ÉâËµ∑Âãï***")
            else:
                list_switch = False
    except:
        list_switch = False

def list_tweet_get(twpy_api):
    global switch
    try:
        gtweets = twpy_api.list_timeline(owner_screen_name = my_screen_name, slug = slug, count = 1)
        return list_tweets2element(gtweets)
    except Exception as e:
        if switch == 0:
            en = re.sub('[^0-9]','', str(e.args))
            if en == '88':
                console.hud_alert('„ÄêÂèñÂæóÂà∂Èôê„Ç®„É©„Éº„Äë','error')
        	
        switch = 2
        sys.exit(3)
        return False

def t_tweet_get(ttw_api, userid, lisg=False):
    global new
    if not lisg:
        newcan = tweet_get(ttw_api, userid)
    else:
        newcan = list_tweet_get(ttw_api)
    if not newcan[1] == 'err':
        new=newcan

def remove_room_vector(text):
    for room in roomidt:
        for vector in vectoridt:
            text = re.sub(room + vector + "[0-9Ôºê-Ôºô]+", '', text)
            text = re.sub(room + "[0-9Ôºê-Ôºô]+", '', text)

    return text


#if len(re.findall('[0-9]Ê°Å|[Ôºê-Ôºô]Ê°Å|[0-9]„Åë„Åü|[Ôºê-Ôºô]„Åë„Åü|[‰∏Ä-‰πù]Ê°Å', twtext)) == 0:
def check_passtweet(twtext):
    if not twtext == "err":
        if not twtext[0:6] == "listtt":
            if oldtweet_text[:60] != twtext[:60]:
                return True
            return False
        else:
            if old_list_tweet[:60] != twtext[:60]:
                return True
            return False
    else:
        return False


def pass_auto(tweet_id, tweettext, img_url):
    global switch
    global error_script
    password = ''
    flag = False
    original=tweettext
    if img_mode == 'True':
        if img_url != '':
            tweettext = add_img(img_url, tweettext)
    tweettext = re.sub("listtt","",tweettext)
    if len(tweettext)<11:
        simn = re.findall('[0-9Ôºê-Ôºô]+',tweettext)
        if len(simn) == 2:
            if len(simn[0])+len(simn[1])>5:
                return simn[1]
    tweettext = re.sub(' |\u3000', '', tweettext)
    tweettext = '\n' + tweettext
#sqmmode off
    for i in range(len(idt)):
        tweettext = re.sub(idt[i], numidt[i], tweettext)
    tweettext = re.sub('https?://[\\w/:%#\\$&\\?\\(\\)~\\.=\\+\\-]+', '', tweettext)
    tweettext = re.sub('[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]:[0-9Ôºê-Ôºô][0-9Ôºê-Ôºô]?|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]/[0-9Ôºê-Ôºô][0-9Ôºê-Ôºô]?|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]ÊôÇ|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]ÂàÜ|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Êó•|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Êúà|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Âõû', '', tweettext)
    tweettext = re.sub('[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]ÁµÑ|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]„ÉÅ„Éº„É†|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]„Ç≠„É´|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]‰Ωç|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Áï™|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Êû†|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]‰∫∫|[0-9Ôºê-Ôºô]?[0-9Ôºê-Ôºô]Âêç', '', tweettext)
    tweettext = re.sub('GO|go|Go|START|start|Start|DM|dm|id|ID|Id|Just|JUST|just', '', tweettext)
    tweettext = re.sub('[0-9Ôºê-Ôºô]+ÂÜÜ|@[0-9Ôºê-Ôºôa-zA-Z_]+', '', tweettext)
    tweettext = re.sub('500 ?√ó ?[0-9]|1000 ?√ó ?[0-9]|1500 ?√ó ?[0-9]|2000 ?√ó ?[0-9]|3000 ?√ó ?[0-9]|5000 ?√ó ?[0-9]|10000 ?√ó ?[0-9]|500 ?‚úñÔ∏è ?[0-9]|1000 ? ‚úñÔ∏è ?[0-9]|1500 ?‚úñÔ∏è ?[0-9]|2000 ?‚úñÔ∏è ?[0-9]|3000 ?‚úñÔ∏è ?[0-9]|5000 ?‚úñÔ∏è ?[0-9]|10000 ?‚úñÔ∏è ?[0-9]|[0-9]+√ó‰∫∫Êï∞|[0-9]+‚úñÔ∏è‰∫∫Êï∞', '', tweettext)
    #Êï∞Â≠óÊé¢Á¥¢
    match = re.findall('[0-9Ôºê-Ôºô]+', tweettext)
    if alpha_mode == 'True':
        tweettext = re.sub('GO|go|Go|START|start|Start|DM|dm|id|ID|Id|Just|JUST|just', '', tweettext)
        match = re.findall('[0-9Ôºê-Ôºôa-zA-Z]+', tweettext)
    tweettext = remove_room_vector(tweettext)
    bnnum = len(re.findall('\\W', tweettext))
    fddst = []
    for i in range(len(passch)):
        twfd = tweettext.find(passch[i])
        if twfd != -1:
            fddst = re.findall('[0-9Ôºê-Ôºô]+', tweettext[twfd:])
            if alpha_mode == 'True':
                fddst = re.findall('[0-9Ôºê-Ôºôa-zA-Z]+', tweettext[twfd + len(passch[i]):])
            if len(fddst) != 0:
                password = converter(fddst[0])
                return password
    if len(match) == 0:
        for i in range(len(sub_idt)):
            tweettext = re.sub(sub_idt[i], sub_numidt[i], tweettext)
        match = re.findall('[0-9Ôºê-Ôºô]+', tweettext)
    if len(match) == 1:
        password = converter(match[0])
        return password
    else:
        if len(match) >= 2:
            password = converter(match[1])
            return password
        console.hud_alert('ÂèñÂæóÂ§±Êïó','error')
        sound.play_effect('digital:ZapThreeToneDown', 0.1)
        #console.show_image('./src/extract_error.png')
        try:
            mememe=tw_api[0].me()
            nowt = str(datetime.datetime.now())
            error_script =  "atweet_id x"+str(error_script.count('atweet_id'))+"   ltweet_id x"+str(error_script.count('ltweet_id'))+error_script
            error_script = re.sub("local variable 'atweet_id' referenced before assignment","",error_script)
            error_script = re.sub("local variable 'ltweet_id' referenced before assignment","",error_script)

            stext = nowt[:nowt.find(".")]+'\n„É™„Çπ„Éà„Çπ„Ç§„ÉÉ„ÉÅ:'+str(list_switch)+"\n„Ç®„É©„ÉºÊñá\n"+error_script+"\nuser:@"+mememe.screen_name+"\ntweet:"+oldtweet_name+"\n"+oldtweet_text+"\nÂá¶ÁêÜÂâç„ÉÜ„Ç≠„Çπ„Éà\n"+original+"\nÂá¶ÁêÜÂæå„ÉÜ„Ç≠„Çπ„Éà"+tweettext
            stext = urllib.parse.quote(stext)
            requests.get()
        except:
            pass
        switch = 5
        sys.exit(3)
        return False

def add_api(num_i,idid):
    global tw_api
    try:
        if num_i == 1:
            f = open('.tw.txt', 'r')
        else:
            f = open('.tw'+str(num_i)+'.txt', 'r')
        for row in f:
            settingtxt = row.strip()
        f.close()
        codes = re.split('#', settingtxt)
        CK = convert_from_hash(codes[0])
        CS = convert_from_hash(codes[1])
        AT = convert_from_hash(codes[2])
        AS = convert_from_hash(codes[3])
        au = convert_from_hash(codes[4])
        auth = tweepy.OAuthHandler(CK, CS)
        auth.set_access_token(AT, AS)
        api = tweepy.API(auth)
        try:
            api.user_timeline(count=1, screen_name=idid)
            tw_api.append(api)
            if num_i == 5:
                initt = threading.Thread(target=init_list_member, args=(api,idid))
                initt.start()
        except Exception as e:
            print(':::::No.'+str(num_i)+':::::')
            en = re.sub('[^0-9]','', str(e.args))
            if en == '88':
                print("ÂèñÂæóÂà∂Èôê(15ÂàÜÂæå„Å´Ëß£Èô§)")
            else:
                print(e)
    except:
        pass

def run_pass_auto():
    global oldimg_url
    global oldtweet_id
    global oldtweet_name
    global oldtweet_text
    global exrep
    global switch
    global new
    global error_script
    
    global alpha_mode,img_mode,speed
    try:
        with open('./.option.csv', 'r', encoding='utf8') as (f):
            reader = csv.reader(f)
            for i in reader:
                alpha_mode = i[0]
                img_mode = i[1]
                sleep_time = 0.21-float(i[2])*0.2
        print("***Ë®≠ÂÆöË™≠„ÅøËæº„ÅøÂÆå‰∫Ü***")
        print("****„Ç™„Éº„ÉàËµ∑Âãï****")

    except:
        console.alert('Pythonista„ÅßÂÖà„Å´Ë®≠ÂÆö„Åó„Å¶‰∏ã„Åï„ÅÑ„ÄÇ')
        sys.exit(3)
    
    try:
        f = open('.tw.txt', 'r')
        for row in f:
            settingtxt = row.strip()
        f.close()
        codes = re.split('#', settingtxt)
        au = convert_from_hash(codes[4])
    except:
        print('TwitterÈÄ£Êê∫„ÅåÁÑ°Âäπ„Åß„Åô\n')
        sys.exit()
    if not au==str(send_code*33):
        print('Ë≥ºÂÖ•ËÄÖ„Ç≥„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô\n')
        sys.exit()
    
    userid = url2id(url)
    
    add_api(1,userid)
    for i in range(2,6):
        tt = threading.Thread(target=add_api, args=(i,userid))
        tt.start()
        time.sleep(0.15)
    tt.join()
    #print("****ÈÄ£Êê∫Ê∏à„Åø"+str(len(tw_api))+"ÂÄã****")
    
    start_time = time.time()
    stpcount = 0
    
    if len(tw_api) == 0:
        print("ÈÄ£Êê∫‰∏çË∂≥„Ç®„É©„Éº")
        sys.exit()

    old = tweet_get(tw_api[0], userid, True)
    while old[1] == 'err':
        old = tweet_get(tw_api[0], userid, True)
        stpcount += 1
        if stpcount == 5:
            print("„ÉÑ„Ç§„Éº„ÉàÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
            sys.exit()
    oldtweet_id = old[0]
    oldtweet_text = old[1]
    oldtweet_name = old[2]
    oldimg_url = old[3]
    print(oldtweet_name + '„ÅÆ„Éë„Çπ„ÉÑ„Ç§ÂæÖÊ©ü‰∏≠‚Ä¢‚Ä¢‚Ä¢')
    new = tweet_get(tw_api[0], userid)
    mtweet_id = new[0]
    mtweet_text = new[1]
    mtweet_name = new[2]
    mimg_url = new[3]
    elapsed_time = 0
    api_switch = 0
    loop_count = 0
    list_get = False
    while switch == 0:
        api_switch = api_switch%len(tw_api)
        if list_switch:
            list_get = not list_get
        t = threading.Thread(target=t_tweet_get, args=(tw_api[api_switch], userid, list_get))
        t.start()
        mtweet_id = new[0]
        mtweet_text = new[1]
        mtweet_name = new[2]
        mimg_url = new[3]
        if not keyboard.is_keyboard():
            print(mtweet_text)
        flag = check_passtweet(mtweet_text)
        if flag:
            ps = pass_auto(mtweet_id, mtweet_text, mimg_url)
            if keyboard.is_keyboard():
                keyboard.backspace(10)
                keyboard.insert_text(ps)
                keyboard.insert_text('\n')
            print('****ÂèñÂæóÊàêÂäü****\n' + ps)
            sound.play_effect('arcade:Coin_2', 0.10)
            switch = 1
            try:
                mememe=tw_api[0].me()
                nowt = str(datetime.datetime.now())
                error_script =  "atweet_id x"+str(error_script.count('atweet_id'))+"   ltweet_id x"+str(error_script.count('ltweet_id'))+error_script
                error_script = re.sub("local variable 'atweet_id' referenced before assignment","",error_script)
                error_script = re.sub("local variable 'ltweet_id' referenced before assignment","",error_script)
                stext = nowt[:nowt.find(".")]+'\n„É™„Çπ„Éà„Çπ„Ç§„ÉÉ„ÉÅ:'+str(list_switch)+"\n„Ç®„É©„ÉºÊñá\n"+error_script+"\nuser:@"+mememe.screen_name+"\nsleeptime:"+str(sleep_time)+"\ntweet:"+oldtweet_name+"\n"+oldtweet_text+"\nÂá¶ÁêÜÂâç„ÉÜ„Ç≠„Çπ„Éà\n"+mtweet_text+"\nÂá¶ÁêÜÂæå„ÉÜ„Ç≠„Çπ„Éà\n"+ps
                stext = urllib.parse.quote(stext)
                requests.get()
            except Exception as e:
                #print(e)
                pass
        api_switch+=1
        time.sleep(sleep_time)

run_pass_auto()
